import { Config, getStack } from "@pulumi/pulumi"import { config as readFromEnvFile } from "dotenv"import * as digitalocean from "./providers/digitalocean"import { AppSpec, Release } from "./providers/helm"import { CloudProvider, Infrastructure } from "./stacks"declare global {  namespace NodeJS {    interface ProcessEnv {      APP_NAME: string      APP_ENV: AppEnv      APP_VERSION: string    }  }}type AppEnv = "staging" | "production"interface Deployment {  release(spec?: AppSpec): Release[]}interface CloudApp<T extends CloudProvider> {  deploy(config: CloudAppConfiguration<T>): Infrastructure<T>}interface CloudSpec {  domain: string  region: string}interface Configuration<T extends CloudSpec = CloudSpec> {  spec: T  metadata: ProjectMeta}interface CloudAppConfiguration<T extends CloudProvider> {  metadata: ProjectMeta  spec: ResolvedCloudSpec<T> &    AppSpec & { [key in "github-vault"]: { secrets: Record<string, string>; vars: Record<string, string> } }}type ResolvedCloudSpec<T extends CloudProvider = "digitalocean"> = T extends "digitalocean"  ? digitalocean.CloudSpec  : CloudSpecinterface ProjectMeta {  name: string  version: string  environment: AppEnv}function configure<T extends CloudProvider>(spec?: CloudAppConfiguration<T>["spec"]) {  readFromEnvFile()  const config = {    metadata: getMetadata(),    spec: spec ?? new Config("app").requireObject<CloudAppConfiguration<T>["spec"]>("spec"),  }  return {    cloud: (type: new (configuration: CloudAppConfiguration<T>) => Infrastructure<T>) => {      const infrastructure = new type(config)      return infrastructure.env    },  }}function getMetadata(): ProjectMeta {  return {    name: process.env.APP_NAME ?? new Config().name,    version: process.env.APP_VERSION ?? "latest",    environment: (process.env.APP_ENV ?? getStack()) as AppEnv,  }}export * as aws from "./providers/aws"export * as digitalocean from "./providers/digitalocean"export * as github from "./providers/github"export * as harbor from "./providers/harbor"export * as helm from "./providers/helm"export * as postgresql from "./providers/postgresql"export * as ssh from "./providers/ssh"export * as vault from "./providers/vault"export * as cloud from "./stacks"export { configure, CloudSpec, Deployment, CloudApp, AppSpec, ProjectMeta, CloudAppConfiguration }